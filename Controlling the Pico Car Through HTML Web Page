This project is a Wi-Fi controlled robot car built on a Raspberry Pi Pico using MicroPython. The core idea is to control two DC motors via a web interface served by the Pico itself. The code handles both motor control and the web server that receives commands from a browser, making the car move forward, backward, left, right, or stop on demand.

The program begins by setting up the necessary hardware pins for two motors, Motor A and Motor B. Each motor is controlled by two GPIO pins to set its direction, and a PWM pin to regulate the motor speed. The speed is set using a 16-bit duty cycle on PWM, with a fixed frequency of 1000 Hz. This setup allows fine speed control and precise motor direction switching.

Next, the movement functions are defined. For moving forward and backward, both motors are powered simultaneously in the same direction. However, turning left and right required some careful thought. Initially, attempts to turn by running both motors in opposite directions caused the robot to spin unpredictably or both motors running at once during turns, which was not the intended behavior. To solve this, the logic was simplified to use only one motor at a time for turning: to turn left, only Motor A runs forward while Motor B stops, and to turn right, only Motor B runs forward while Motor A stops. This change made turning more stable and intuitive.

One tricky issue encountered was that running Motor A forward in the code made the robot actually go backward, which required swapping the pin values for that motor's forward and backward logic. Similarly, during right turns, Motor B was running backward instead of forward, so the motor pins for Motor B were corrected to ensure forward rotation during turns.

The program also sets up Wi-Fi connectivity using provided SSID and password, establishing the Raspberry Pi Pico as a network client. Once connected, the Pico opens a socket server on port 80, listening for incoming HTTP requests from the user’s browser.

A simple HTML webpage serves as the user interface, presenting large buttons for forward, backward, left, right, and stop commands. When a button is pressed, the browser sends a GET request with the command path (e.g., /forward) to the Pico’s IP address.

The server listens for these requests, parses the requested path, and calls the corresponding motor control function. After executing the command, it responds with the same control webpage so the user can continue controlling the robot seamlessly.

During testing, there were some challenges parsing and handling HTTP requests, especially ignoring irrelevant requests like those for the favicon, which browsers request by default. Filtering these out prevented unnecessary confusion in the logs and ensured the server didn’t attempt to run motor commands on invalid paths.

In summary, this project showcases the integration of low-level hardware control (GPIO and PWM for motors) with network programming (Wi-Fi connection, socket server, HTTP parsing) to build an interactive remote-controlled robot. The main struggles were figuring out motor direction logic, fixing motor pin configurations, and designing reliable turn commands that only activate the necessary motor without causing unwanted simultaneous movements. Thanks to these iterative fixes, the robot now responds smoothly to web commands, moving in all directions and stopping promptly on request.

import network
import socket
from time import sleep
from machine import Pin, PWM, reset

# Wi-Fi credentials
ssid = 'your wifi name'
password = 'your wifi's password'

# Motor A pins
IN1 = Pin(2, Pin.OUT)
IN2 = Pin(3, Pin.OUT)
ENA = PWM(Pin(4))
ENA.freq(1000)

# Motor B pins
IN3 = Pin(5, Pin.OUT)
IN4 = Pin(6, Pin.OUT)
ENB = PWM(Pin(7))
ENB.freq(1000)

speed = 50000  # PWM duty for movement

# Movement functions
def move_forward():
    IN1.value(1)
    IN2.value(0)
    ENA.duty_u16(speed)

    IN3.value(1)
    IN4.value(0)
    ENB.duty_u16(speed)

def move_backward():
    IN1.value(0)
    IN2.value(1)
    ENA.duty_u16(speed)

    IN3.value(0)
    IN4.value(1)
    ENB.duty_u16(speed)

def move_left():
    # Stop Motor B completely
    IN3.value(0)
    IN4.value(0)
    ENB.duty_u16(0)

    # Run Motor A forward
    IN1.value(1)
    IN2.value(0)
    ENA.duty_u16(speed)

def move_right():
    # Stop Motor A completely
    IN1.value(0)
    IN2.value(0)
    ENA.duty_u16(0)

    # Run Motor B forward (corrected)
    IN3.value(1)
    IN4.value(0)
    ENB.duty_u16(speed)

def move_stop():
    ENA.duty_u16(0)
    ENB.duty_u16(0)

# Connect to Wi-Fi
def connect():
    wlan = network.WLAN(network.STA_IF)
    wlan.active(True)
    wlan.connect(ssid, password)
    while not wlan.isconnected():
        print("Connecting to Wi-Fi...")
        sleep(1)
    ip = wlan.ifconfig()[0]
    print(f"Connected on {ip}")
    return ip

# Open a socket
def open_socket(ip):
    address = (ip, 80)
    s = socket.socket()
    s.bind(address)
    s.listen(1)
    return s

# HTML interface (buttons use GET method to avoid "?")
def webpage():
    html = """<!DOCTYPE html>
<html>
<head><title>Pico Car</title></head>
<body style="text-align:center">
<h1>Control Panel</h1>
<form action="/forward" method="GET"><input type="submit" value="Forward" style="height:100px;width:150px" /></form>
<table style="margin:auto"><tr>
<td><form action="/left" method="GET"><input type="submit" value="Left" style="height:100px;width:150px" /></form></td>
<td><form action="/stop" method="GET"><input type="submit" value="Stop" style="height:100px;width:150px" /></form></td>
<td><form action="/right" method="GET"><input type="submit" value="Right" style="height:100px;width:150px" /></form></td>
</tr></table>
<form action="/backward" method="GET"><input type="submit" value="Backward" style="height:100px;width:150px" /></form>
</body>
</html>"""
    return html

# Handle web requests
def serve(socket):
    while True:
        client = socket.accept()[0]
        request = client.recv(1024)
        request = str(request)
        print("Request:", request)

        try:
            path = request.split(' ')[1]
        except IndexError:
            path = '/'

        print("Path:", path)

        # Ignore favicon
        if path.startswith('/favicon'):
            client.close()
            continue

        # Handle movement
        if path.startswith('/forward'):
            move_forward()
        elif path.startswith('/backward'):
            move_backward()
        elif path.startswith('/left'):
            move_left()
        elif path.startswith('/right'):
            move_right()
        elif path.startswith('/stop'):
            move_stop()

        # Serve HTML response
        client.send('HTTP/1.1 200 OK\r\n')
        client.send('Content-Type: text/html\r\n')
        client.send('Connection: close\r\n\r\n')
        client.sendall(webpage())
        client.close()

# Run the robot server
try:
    move_stop()
    ip = connect()
    s = open_socket(ip)
    serve(s)
except KeyboardInterrupt:
    move_stop()
    reset()
